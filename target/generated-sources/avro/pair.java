/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
/** An edge between a pair of vertices */
public class pair extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"pair\",\"doc\":\"An edge between a pair of vertices\",\"fields\":[{\"name\":\"fromv\",\"type\":\"int\"},{\"name\":\"tov\",\"type\":\"int\"}]}");
  @Deprecated public int fromv;
  @Deprecated public int tov;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return fromv;
    case 1: return tov;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: fromv = (java.lang.Integer)value$; break;
    case 1: tov = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'fromv' field.
   */
  public java.lang.Integer getFromv() {
    return fromv;
  }

  /**
   * Sets the value of the 'fromv' field.
   * @param value the value to set.
   */
  public void setFromv(java.lang.Integer value) {
    this.fromv = value;
  }

  /**
   * Gets the value of the 'tov' field.
   */
  public java.lang.Integer getTov() {
    return tov;
  }

  /**
   * Sets the value of the 'tov' field.
   * @param value the value to set.
   */
  public void setTov(java.lang.Integer value) {
    this.tov = value;
  }

  /** Creates a new pair RecordBuilder */
  public static pair.Builder newBuilder() {
    return new pair.Builder();
  }
  
  /** Creates a new pair RecordBuilder by copying an existing Builder */
  public static pair.Builder newBuilder(pair.Builder other) {
    return new pair.Builder(other);
  }
  
  /** Creates a new pair RecordBuilder by copying an existing pair instance */
  public static pair.Builder newBuilder(pair other) {
    return new pair.Builder(other);
  }
  
  /**
   * RecordBuilder for pair instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<pair>
    implements org.apache.avro.data.RecordBuilder<pair> {

    private int fromv;
    private int tov;

    /** Creates a new Builder */
    private Builder() {
      super(pair.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(pair.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing pair instance */
    private Builder(pair other) {
            super(pair.SCHEMA$);
      if (isValidValue(fields()[0], other.fromv)) {
        this.fromv = (java.lang.Integer) data().deepCopy(fields()[0].schema(), other.fromv);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tov)) {
        this.tov = (java.lang.Integer) data().deepCopy(fields()[1].schema(), other.tov);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'fromv' field */
    public java.lang.Integer getFromv() {
      return fromv;
    }
    
    /** Sets the value of the 'fromv' field */
    public pair.Builder setFromv(int value) {
      validate(fields()[0], value);
      this.fromv = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'fromv' field has been set */
    public boolean hasFromv() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'fromv' field */
    public pair.Builder clearFromv() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'tov' field */
    public java.lang.Integer getTov() {
      return tov;
    }
    
    /** Sets the value of the 'tov' field */
    public pair.Builder setTov(int value) {
      validate(fields()[1], value);
      this.tov = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'tov' field has been set */
    public boolean hasTov() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'tov' field */
    public pair.Builder clearTov() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public pair build() {
      try {
        pair record = new pair();
        record.fromv = fieldSetFlags()[0] ? this.fromv : (java.lang.Integer) defaultValue(fields()[0]);
        record.tov = fieldSetFlags()[1] ? this.tov : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
