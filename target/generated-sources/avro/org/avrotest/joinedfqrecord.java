/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.avrotest;  
@SuppressWarnings("all")
/** Foined FastQ File Structure */
public class joinedfqrecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"joinedfqrecord\",\"namespace\":\"org.avrotest\",\"doc\":\"Foined FastQ File Structure\",\"fields\":[{\"name\":\"id1\",\"type\":\"string\"},{\"name\":\"read1\",\"type\":\"string\"},{\"name\":\"qvalue1\",\"type\":\"string\"},{\"name\":\"id2\",\"type\":\"string\"},{\"name\":\"read2\",\"type\":\"string\"},{\"name\":\"qvalue2\",\"type\":\"string\"}]}");
  @Deprecated public java.lang.CharSequence id1;
  @Deprecated public java.lang.CharSequence read1;
  @Deprecated public java.lang.CharSequence qvalue1;
  @Deprecated public java.lang.CharSequence id2;
  @Deprecated public java.lang.CharSequence read2;
  @Deprecated public java.lang.CharSequence qvalue2;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id1;
    case 1: return read1;
    case 2: return qvalue1;
    case 3: return id2;
    case 4: return read2;
    case 5: return qvalue2;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id1 = (java.lang.CharSequence)value$; break;
    case 1: read1 = (java.lang.CharSequence)value$; break;
    case 2: qvalue1 = (java.lang.CharSequence)value$; break;
    case 3: id2 = (java.lang.CharSequence)value$; break;
    case 4: read2 = (java.lang.CharSequence)value$; break;
    case 5: qvalue2 = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id1' field.
   */
  public java.lang.CharSequence getId1() {
    return id1;
  }

  /**
   * Sets the value of the 'id1' field.
   * @param value the value to set.
   */
  public void setId1(java.lang.CharSequence value) {
    this.id1 = value;
  }

  /**
   * Gets the value of the 'read1' field.
   */
  public java.lang.CharSequence getRead1() {
    return read1;
  }

  /**
   * Sets the value of the 'read1' field.
   * @param value the value to set.
   */
  public void setRead1(java.lang.CharSequence value) {
    this.read1 = value;
  }

  /**
   * Gets the value of the 'qvalue1' field.
   */
  public java.lang.CharSequence getQvalue1() {
    return qvalue1;
  }

  /**
   * Sets the value of the 'qvalue1' field.
   * @param value the value to set.
   */
  public void setQvalue1(java.lang.CharSequence value) {
    this.qvalue1 = value;
  }

  /**
   * Gets the value of the 'id2' field.
   */
  public java.lang.CharSequence getId2() {
    return id2;
  }

  /**
   * Sets the value of the 'id2' field.
   * @param value the value to set.
   */
  public void setId2(java.lang.CharSequence value) {
    this.id2 = value;
  }

  /**
   * Gets the value of the 'read2' field.
   */
  public java.lang.CharSequence getRead2() {
    return read2;
  }

  /**
   * Sets the value of the 'read2' field.
   * @param value the value to set.
   */
  public void setRead2(java.lang.CharSequence value) {
    this.read2 = value;
  }

  /**
   * Gets the value of the 'qvalue2' field.
   */
  public java.lang.CharSequence getQvalue2() {
    return qvalue2;
  }

  /**
   * Sets the value of the 'qvalue2' field.
   * @param value the value to set.
   */
  public void setQvalue2(java.lang.CharSequence value) {
    this.qvalue2 = value;
  }

  /** Creates a new joinedfqrecord RecordBuilder */
  public static org.avrotest.joinedfqrecord.Builder newBuilder() {
    return new org.avrotest.joinedfqrecord.Builder();
  }
  
  /** Creates a new joinedfqrecord RecordBuilder by copying an existing Builder */
  public static org.avrotest.joinedfqrecord.Builder newBuilder(org.avrotest.joinedfqrecord.Builder other) {
    return new org.avrotest.joinedfqrecord.Builder(other);
  }
  
  /** Creates a new joinedfqrecord RecordBuilder by copying an existing joinedfqrecord instance */
  public static org.avrotest.joinedfqrecord.Builder newBuilder(org.avrotest.joinedfqrecord other) {
    return new org.avrotest.joinedfqrecord.Builder(other);
  }
  
  /**
   * RecordBuilder for joinedfqrecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<joinedfqrecord>
    implements org.apache.avro.data.RecordBuilder<joinedfqrecord> {

    private java.lang.CharSequence id1;
    private java.lang.CharSequence read1;
    private java.lang.CharSequence qvalue1;
    private java.lang.CharSequence id2;
    private java.lang.CharSequence read2;
    private java.lang.CharSequence qvalue2;

    /** Creates a new Builder */
    private Builder() {
      super(org.avrotest.joinedfqrecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.avrotest.joinedfqrecord.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing joinedfqrecord instance */
    private Builder(org.avrotest.joinedfqrecord other) {
            super(org.avrotest.joinedfqrecord.SCHEMA$);
      if (isValidValue(fields()[0], other.id1)) {
        this.id1 = (java.lang.CharSequence) data().deepCopy(fields()[0].schema(), other.id1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.read1)) {
        this.read1 = (java.lang.CharSequence) data().deepCopy(fields()[1].schema(), other.read1);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.qvalue1)) {
        this.qvalue1 = (java.lang.CharSequence) data().deepCopy(fields()[2].schema(), other.qvalue1);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.id2)) {
        this.id2 = (java.lang.CharSequence) data().deepCopy(fields()[3].schema(), other.id2);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.read2)) {
        this.read2 = (java.lang.CharSequence) data().deepCopy(fields()[4].schema(), other.read2);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.qvalue2)) {
        this.qvalue2 = (java.lang.CharSequence) data().deepCopy(fields()[5].schema(), other.qvalue2);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'id1' field */
    public java.lang.CharSequence getId1() {
      return id1;
    }
    
    /** Sets the value of the 'id1' field */
    public org.avrotest.joinedfqrecord.Builder setId1(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id1 = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id1' field has been set */
    public boolean hasId1() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id1' field */
    public org.avrotest.joinedfqrecord.Builder clearId1() {
      id1 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'read1' field */
    public java.lang.CharSequence getRead1() {
      return read1;
    }
    
    /** Sets the value of the 'read1' field */
    public org.avrotest.joinedfqrecord.Builder setRead1(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.read1 = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'read1' field has been set */
    public boolean hasRead1() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'read1' field */
    public org.avrotest.joinedfqrecord.Builder clearRead1() {
      read1 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'qvalue1' field */
    public java.lang.CharSequence getQvalue1() {
      return qvalue1;
    }
    
    /** Sets the value of the 'qvalue1' field */
    public org.avrotest.joinedfqrecord.Builder setQvalue1(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.qvalue1 = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'qvalue1' field has been set */
    public boolean hasQvalue1() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'qvalue1' field */
    public org.avrotest.joinedfqrecord.Builder clearQvalue1() {
      qvalue1 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'id2' field */
    public java.lang.CharSequence getId2() {
      return id2;
    }
    
    /** Sets the value of the 'id2' field */
    public org.avrotest.joinedfqrecord.Builder setId2(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.id2 = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'id2' field has been set */
    public boolean hasId2() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'id2' field */
    public org.avrotest.joinedfqrecord.Builder clearId2() {
      id2 = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'read2' field */
    public java.lang.CharSequence getRead2() {
      return read2;
    }
    
    /** Sets the value of the 'read2' field */
    public org.avrotest.joinedfqrecord.Builder setRead2(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.read2 = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'read2' field has been set */
    public boolean hasRead2() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'read2' field */
    public org.avrotest.joinedfqrecord.Builder clearRead2() {
      read2 = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'qvalue2' field */
    public java.lang.CharSequence getQvalue2() {
      return qvalue2;
    }
    
    /** Sets the value of the 'qvalue2' field */
    public org.avrotest.joinedfqrecord.Builder setQvalue2(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.qvalue2 = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'qvalue2' field has been set */
    public boolean hasQvalue2() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'qvalue2' field */
    public org.avrotest.joinedfqrecord.Builder clearQvalue2() {
      qvalue2 = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public joinedfqrecord build() {
      try {
        joinedfqrecord record = new joinedfqrecord();
        record.id1 = fieldSetFlags()[0] ? this.id1 : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.read1 = fieldSetFlags()[1] ? this.read1 : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.qvalue1 = fieldSetFlags()[2] ? this.qvalue1 : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.id2 = fieldSetFlags()[3] ? this.id2 : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.read2 = fieldSetFlags()[4] ? this.read2 : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.qvalue2 = fieldSetFlags()[5] ? this.qvalue2 : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
