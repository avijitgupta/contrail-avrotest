/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.avrotest;  
@SuppressWarnings("all")
/** A Fastq Read */
public class fastqrecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"fastqrecord\",\"namespace\":\"org.avrotest\",\"doc\":\"A Fastq Read\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"read\",\"type\":\"string\"},{\"name\":\"qvalue\",\"type\":\"string\"}]}");
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence read;
  @Deprecated public java.lang.CharSequence qvalue;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return read;
    case 2: return qvalue;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: read = (java.lang.CharSequence)value$; break;
    case 2: qvalue = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'read' field.
   */
  public java.lang.CharSequence getRead() {
    return read;
  }

  /**
   * Sets the value of the 'read' field.
   * @param value the value to set.
   */
  public void setRead(java.lang.CharSequence value) {
    this.read = value;
  }

  /**
   * Gets the value of the 'qvalue' field.
   */
  public java.lang.CharSequence getQvalue() {
    return qvalue;
  }

  /**
   * Sets the value of the 'qvalue' field.
   * @param value the value to set.
   */
  public void setQvalue(java.lang.CharSequence value) {
    this.qvalue = value;
  }

  /** Creates a new fastqrecord RecordBuilder */
  public static org.avrotest.fastqrecord.Builder newBuilder() {
    return new org.avrotest.fastqrecord.Builder();
  }
  
  /** Creates a new fastqrecord RecordBuilder by copying an existing Builder */
  public static org.avrotest.fastqrecord.Builder newBuilder(org.avrotest.fastqrecord.Builder other) {
    return new org.avrotest.fastqrecord.Builder(other);
  }
  
  /** Creates a new fastqrecord RecordBuilder by copying an existing fastqrecord instance */
  public static org.avrotest.fastqrecord.Builder newBuilder(org.avrotest.fastqrecord other) {
    return new org.avrotest.fastqrecord.Builder(other);
  }
  
  /**
   * RecordBuilder for fastqrecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<fastqrecord>
    implements org.apache.avro.data.RecordBuilder<fastqrecord> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence read;
    private java.lang.CharSequence qvalue;

    /** Creates a new Builder */
    private Builder() {
      super(org.avrotest.fastqrecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.avrotest.fastqrecord.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing fastqrecord instance */
    private Builder(org.avrotest.fastqrecord other) {
            super(org.avrotest.fastqrecord.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = (java.lang.CharSequence) data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.read)) {
        this.read = (java.lang.CharSequence) data().deepCopy(fields()[1].schema(), other.read);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.qvalue)) {
        this.qvalue = (java.lang.CharSequence) data().deepCopy(fields()[2].schema(), other.qvalue);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.avrotest.fastqrecord.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public org.avrotest.fastqrecord.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'read' field */
    public java.lang.CharSequence getRead() {
      return read;
    }
    
    /** Sets the value of the 'read' field */
    public org.avrotest.fastqrecord.Builder setRead(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.read = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'read' field has been set */
    public boolean hasRead() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'read' field */
    public org.avrotest.fastqrecord.Builder clearRead() {
      read = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'qvalue' field */
    public java.lang.CharSequence getQvalue() {
      return qvalue;
    }
    
    /** Sets the value of the 'qvalue' field */
    public org.avrotest.fastqrecord.Builder setQvalue(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.qvalue = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'qvalue' field has been set */
    public boolean hasQvalue() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'qvalue' field */
    public org.avrotest.fastqrecord.Builder clearQvalue() {
      qvalue = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public fastqrecord build() {
      try {
        fastqrecord record = new fastqrecord();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.read = fieldSetFlags()[1] ? this.read : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.qvalue = fieldSetFlags()[2] ? this.qvalue : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
